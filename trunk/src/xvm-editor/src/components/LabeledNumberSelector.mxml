<?xml version="1.0" encoding="utf-8"?>
<c:LabeledComponent xmlns:fx="http://ns.adobe.com/mxml/2009"
	    xmlns:s="library://ns.adobe.com/flex/spark"
	    xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:c="components.*"
		width="100%"
		height="20"
		borderVisible="false">
	<fx:Script>
		// value
		[Bindable]
		public override function get value():*
		{
			return edit.value;
		}
		public override function set value(v:*): void
		{
			edit.value = v;
			stepper.value = v;
		}

		// minimum
		protected var _minimum: Number = 0;

		[Bindable]
		public function get minimum(): Number
		{
			return _minimum;
		}
		public function set minimum(v: Number): void
		{
			//edit.minimum = v;
			//stepper.minimum = v;
			_minimum = v;
		}

		// maximum
		protected var _maximum: Number = 10;

		[Bindable]
		public function get maximum(): Number
		{
			return _maximum;
		}
		public function set maximum(v: Number): void
		{
			//edit.maximum = v;
			//stepper.maximum = v;
			_maximum = v;
		}

		// sliderVisible
		protected var _sliderVisible: Boolean = true;

		[Bindable]
		public function get sliderVisible(): Boolean
		{
			return _sliderVisible;
		}
		public function set sliderVisible(v: Boolean): void
		{
			_sliderVisible = v;
		}

		protected override function onChange(event:Event):void
		{
			if (event.target == stepper)
				edit.value = stepper.value;
			else
				stepper.value = edit.value;

			dispatchEvent(new Event(Event.CHANGE));
		}
	</fx:Script>
	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>
	<s:Label x="0" text="{label}" width="{labelWidth}" height="{height}" verticalAlign="middle"/>
	<s:NumericStepper left="{labelWidth}" width="52" height="{height}" minimum="{minimum}" maximum="{maximum}" id="stepper" change="onChange(event)"/>
	<s:HSlider left="{stepper.x + stepper.width + 10}" right="0" y="4" minimum="{minimum}" maximum="{maximum}" visible="{sliderVisible}" id="edit" change="onChange(event)"/>
</c:LabeledComponent>
