<?xml version="1.0" encoding="utf-8"?>
<s:VGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:c="components.*"
	xmlns:p="panels.*"
	x="0" y="0" width="100%" height="100%" gap="-1">
	<fx:Metadata>
		[ResourceBundle("panels")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import components.DynamicClanFolderFieldEdit;
			import components.LabeledComponent;
			
			import events.SetDefaultValueEvent;
			import events.ValueChangedEvent;
			
			import mx.core.IVisualElement;
			
			import utils.Config;
			import utils.DefaultConfig;
			import utils.Utils;

			private var m_folders:Array = [];
			private var m_values:Object = {};

			[Embed(source="images/add.png")]
			private static var IMG_add : Class;

			protected var _config:String = null;
			[Bindable]
			public function get config():String
			{
				return _config;
			}
			public function set config(v:String):void
			{
				_config = v;
			}

			public function get value():*
			{
				var a:Array = [];
				a.push( { root: v_root.value, folders: m_folders.join(",") } );

				for (var n:Number = 0; n < m_folders.length; ++n)
					a.push( { folder: m_folders[n], players: m_values[m_folders[n]] } );

				return a;
			}

			protected function onChange(event: Event):void
			{
				if (event)
					event.stopPropagation();
				dispatchEvent(new events.ValueChangedEvent(this));
			}

			private function CreateNewElementButton():IVisualElement
			{
				var img:Image = new Image();
				img.width = 16;
				img.height = 16;
				img.id = "new";
				img.source = new IMG_add();
				img.toolTip = resourceManager.getString('panels', 'AddFolder');
				img.useHandCursor = true;
				img.buttonMode = true;
				img.addEventListener(MouseEvent.CLICK, this.onClick);
				return img;
			}

			private function CreateElement(v:String):DynamicClanFolderFieldEdit
			{
				var instance:DynamicClanFolderFieldEdit = new DynamicClanFolderFieldEdit();
				instance.label = v;
				instance.value = v;
				instance.width = 255;
				instance.group = rbg;
				instance.addEventListener(MouseEvent.CLICK, onClick);
				return instance;
			}

			public function RefreshSource(force: Boolean): void
			{
				var saved_label:String = rbg && rbg.selectedValue ? rbg.selectedValue.toString() : null;

				for (var n:Number = 0; n < container.numElements; ++n)
				{
					var e_old:DynamicClanFolderFieldEdit = container.getElementAt(n) as DynamicClanFolderFieldEdit;
					if (e_old)
						e_old.group = null;
					delete container.getElementAt(n);
				}
				container.removeAllElements();

				m_folders = [];
				m_values = {};

				var conf:String = "players";
				var v:Array = Config.GetValue(conf);
				var root:Object = null;
				for (var i:Number = 0; i < v.length; ++i)
				{
					if (v[i].hasOwnProperty("root"))
						root = { root: v[i]["root"] };
					else if (v[i].hasOwnProperty("folder") && v[i].hasOwnProperty("players"))
					{
						var folder_name:String = Utils.trim(v[i]["folder"]).toUpperCase();
						m_folders.push(folder_name);
						m_values[folder_name] = v[i].players;
						container.addElement(CreateElement(folder_name));
					}
				}

				if (!root)
					root = { root: "../../../clanicons" };
				if (!m_folders || m_folders.length == 0)
					m_folders = [ "" ];
				root.folders = m_folders.join(",");
				v_root.value = root.root;

				if (container.numElements == 0)
				{
					this.RefreshElement(null);
					container.addElement(CreateNewElementButton());
				}
				else
				{
					var selected:DynamicClanFolderFieldEdit = null;
					for (var k:Number = 0; k < container.numElements; ++k)
					{
						var el:DynamicClanFolderFieldEdit = container.getElementAt(k) as DynamicClanFolderFieldEdit;
						if (el.label == saved_label)
							selected = el;
					}
					if (selected)
					{
						selected.selected = true;
						if (selected.label != saved_label || force)
							this.RefreshElement(selected.label);
					}
					else
					{
						this.RefreshElement(null);						
					}
				}
			}

			protected function onRadioButtonChange(event:Event):void
			{
				RefreshElement(rbg.selectedValue.toString());
			}

			public function RefreshElement(name:String):void
			{
				if (name)
				{
					p_players.enabled = true;
					p_players.RefreshSource(m_values[name]);
				}
				else
				{
					p_players.enabled = false
					p_players.RefreshSource([]);
				}
			}

			public function updateValue(event:ValueChangedEvent):void
			{
				try
				{
					event.stopPropagation();

					if (!event.sender.config)
					{
						trace("ERROR: config is null for: " + event.sender.id);
						return;
					}

					if (event.target.config == "players")
					{
						m_values[rbg.selectedValue.toString()] = event.sender.value;
					}
					else
					{
						trace("ERROR: unknown target config: " + event.target.config);
						return;
					}
					
					onChange(null);
				}
				catch (ex:Error)
				{
					trace("ERROR: updateValue(): " + ex.toString());
				}
			}

			protected function setDefaultValue(event:SetDefaultValueEvent):void
			{
				try
				{
					event.stopPropagation();

					if (!event.sender.config)
					{
						trace("ERROR: config is null for: " + event.sender.id);
						return;
					}

					if (event.target.config == "players")
					{
						var v:Array = Config.GetValue(event.target.config, DefaultConfig.config);
						for (var i:Number = 0; i < v.length; ++i)
						{
							if (!v[i].hasOwnProperty("folder"))
								continue;
							var folder_name:String = v[i]["folder"].toString();
							if (folder_name != rbg.selectedValue.toString())
								continue;
							m_values[folder_name] = v[i].players;
							break;
						}
					}
					else
					{
						trace("ERROR: unknown target config: " + event.target.config);
						return;
					}
					
					onChange(null);
					RefreshSource(true);
				}
				catch (ex:Error)
				{
					trace("ERROR: setDefaultValue(): " + ex.toString());
				}
			}

			// add/del
			protected function onClick(event:MouseEvent):void
			{
				var e:DynamicClanFolderFieldEdit = event.currentTarget as DynamicClanFolderFieldEdit;
				if (event.target.id == "def")
				{
					dispatchEvent(new events.SetDefaultValueEvent(this));
				}
				else if (event.target.id == "del")
				{
					m_folders.splice(m_folders.indexOf(e.label), 1);
					delete m_values[e.label];
				}
				else if (event.target.id == "add" || event.target.id == "new")
				{
					var n:Number = 0;
					var name:String = "";
					m_folders.push(name);
					m_values[name] = { folder: name, players: [] };
				}
				else
					return;

				event.stopPropagation();

				onChange(null);
				RefreshSource(false);
			}
		]]>
	</fx:Script>
	<fx:Metadata>
		[Event(name="valueChanged", type="events.ValueChangedEvent")]
		[Event(name="setDefaultValue", type="events.SetDefaultValueEvent")]
	</fx:Metadata>
	<fx:Declarations>
		<s:RadioButtonGroup id="rbg" change="onRadioButtonChange(event)"/>
	</fx:Declarations>
	<c:PanelComponent title="{resourceManager.getString('panels', 'PClanIcons')}" width="100%" height="150" borderVisible="false">
		<mx:Image id="def" right="5" y="-18" width="16" height="16" source="@Embed(source='images/revert.png')" toolTip="{resourceManager.getString('markers', 'DefaultSettings')}" useHandCursor="true" buttonMode="true" click="onClick(event)"/>
		<s:VGroup left="10" right="10" top="10" bottom="10" gap="10">
			<c:LabeledPathSelector label="{resourceManager.getString('panels', 'PClanIconsRoot')}" id="v_root" change="onChange(event)"/>
			<s:Scroller left="10" right="10" top="5" height="88">
				<s:VGroup id="container" width="100%" height="100%" gap="-1"/>
			</s:Scroller>
		</s:VGroup>
	</c:PanelComponent>
	<s:Panel width="100%" height="100%" title="{resourceManager.getString('panels', 'PClanIconsIcons')}">
		<p:PDynamicValues id="p_players" config="players" editorClass="DynamicPlayersEdit" valueChanged="updateValue(event)" setDefaultValue="setDefaultValue(event)"/>
	</s:Panel>
</s:VGroup>
