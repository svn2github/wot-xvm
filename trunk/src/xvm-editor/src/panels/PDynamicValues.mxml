<?xml version="1.0" encoding="utf-8"?>
<c:BorderContainerComponent
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:c="components.*"
	width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import components.DynamicAlphaEdit;
			import components.DynamicColorEdit;
			import components.DynamicPlayersEdit;
			import components.LabeledComponent;
			
			import events.ValueChangedEvent;
			
			import flash.events.Event;
			
			import utils.Config;
			
			public function RefreshSource(): void
			{
				container.removeAllElements();
				var src:Array = Config.GetValue(_config);
				for (var i: Number = 0; i < src.length; ++i)
				{
					//var cls:Class = getDefinitionByName(editorClass) as Class;
					var instance:LabeledComponent;// = new cls();
					
					switch (editorClass)
					{
						case "DynamicAlphaEdit":
							instance = new DynamicAlphaEdit();
							instance.label = "<";
							instance.labelWidth = "10";
							(instance as DynamicAlphaEdit).minimum = minimum;
							(instance as DynamicAlphaEdit).maximum = maximum;
							break;
						case "DynamicColorEdit":
							instance = new DynamicColorEdit();
							instance.label = "<";
							instance.labelWidth = "10";
							(instance as DynamicColorEdit).minimum = minimum;
							(instance as DynamicColorEdit).maximum = maximum;
							break;
						case "DynamicPlayersEdit":
							instance = new DynamicPlayersEdit();
							break;
					}
					
					instance.value = src[i];
					container.addElement(instance);
				}
			}
			
			// config
			private var _config:String;
			
			[Bindable]
			public function get config():String
			{
				return _config;
			}
			public function set config(value:String): void
			{
				_config = value;
			}
			
			// minimum
			protected var _minimum: Number = 0;
			[Bindable]
			public function get minimum(): Number
			{
				return _minimum;
			}
			public function set minimum(v: Number): void
			{
				_minimum = v;
			}
			
			// maximum
			protected var _maximum: Number = 10;
			[Bindable]
			public function get maximum(): Number
			{
				return _maximum;
			}
			public function set maximum(v: Number): void
			{
				_maximum = v;
			}
			
			// renderer
			private var _editorClass:String;
			[Bindable]
			public function get editorClass():String
			{
				return _editorClass;
			}
			public function set editorClass(value:String): void
			{
				_editorClass = value;
			}
		]]>
	</fx:Script>
	<mx:Image right="5" y="5" width="16" height="16" source="@Embed(source='images/cancel.png')" toolTip="Вернуть настройки по умолчанию" useHandCursor="true" buttonMode="true"/>
	<s:HGroup left="10" right="25" top="10" bottom="10">
		<s:Scroller width="100%" height="100%">
			<s:VGroup id="container" width="100%" height="100%" gap="-1"/>
		</s:Scroller>
	</s:HGroup>
</c:BorderContainerComponent>
