<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:c="components.*"
	width="100%" height="100%"
	borderVisible="false">
	<fx:Script>
		<![CDATA[
			import components.DynamicAlphaEdit;
			import components.DynamicColorEdit;
			import components.LabeledComponent;

			import events.SetDefaultValueEvent;
			import events.ValueChangedEvent;

			import flash.events.Event;

			import mx.core.IVisualElement;

			import utils.Config;

			[Embed(source="images/add.png")]
			private static var IMG_add : Class;

			private function CreateNewElementButton():IVisualElement
			{
				var img:Image = new Image();
				img.width = 16;
				img.height = 16;
				img.id = "new";
				img.source = new IMG_add();
				img.toolTip = resourceManager.getString('panels', 'AddLine');
				img.useHandCursor = true;
				img.buttonMode = true;
				img.addEventListener(MouseEvent.CLICK, this.onClick);
				return img;
			}

			private function CreateElement(v:Object = null):LabeledComponent
			{
				//var cls:Class = getDefinitionByName(editorClass) as Class;
				var instance:LabeledComponent;// = new cls();
				switch (editorClass)
				{
					case "DynamicAlphaEdit":
						instance = new DynamicAlphaEdit();
						instance.label = "<";
						instance.labelWidth = "10";
						(instance as DynamicAlphaEdit).minimum = minimum;
						(instance as DynamicAlphaEdit).maximum = maximum;
						instance.value = { value: v ? v.value : 0, alpha: v ? v.alpha : 0 };
						break;
					case "DynamicColorEdit":
						instance = new DynamicColorEdit();
						instance.label = "<";
						instance.labelWidth = "10";
						(instance as DynamicColorEdit).minimum = minimum;
						(instance as DynamicColorEdit).maximum = maximum;
						instance.value = { value: v ? v.value : 0, color: v ? v.color : "" };
						break;
				}

				instance.addEventListener(Event.CHANGE, onChange);
				instance.addEventListener(MouseEvent.CLICK, onClick);
				return instance;
			}

			public function RefreshSource(src: Array = null): void
			{
				for (var n:Number = 0; n < container.numElements; ++n)
					delete container.getElementAt(n);
				container.removeAllElements();
				if (!src)
					src = Config.GetValue(_config);
				if (src.length == 0)
					container.addElement(CreateNewElementButton());
				else
				{
					for (var i: Number = 0; i < src.length; ++i)
						container.addElement(CreateElement(src[i]));
				}
			}

			public function get value():*
			{
				var a: Array = [];
				for (var i:Number = 0; i < container.numElements; ++i)
					a.push((container.getElementAt(i) as LabeledComponent).value);
				return a;
			}

			// config
			private var _config:String;

			[Bindable]
			public function get config():String
			{
				return _config;
			}
			public function set config(value:String): void
			{
				_config = value;
			}

			// minimum
			protected var _minimum: Number = 0;
			[Bindable]
			public function get minimum(): Number
			{
				return _minimum;
			}
			public function set minimum(v: Number): void
			{
				_minimum = v;
			}

			// maximum
			protected var _maximum: Number = 10;
			[Bindable]
			public function get maximum(): Number
			{
				return _maximum;
			}
			public function set maximum(v: Number): void
			{
				_maximum = v;
			}

			// renderer
			private var _editorClass:String;
			[Bindable]
			public function get editorClass():String
			{
				return _editorClass;
			}
			public function set editorClass(value:String): void
			{
				_editorClass = value;
			}

			// onChange
			protected function onChange(event:Event):void
			{
				if (event)
					event.stopPropagation();
				dispatchEvent(new events.ValueChangedEvent(this));
			}

			// add/del
			protected function onClick(event:MouseEvent):void
			{
				if (!event)
					return;
				event.stopPropagation();
				if (event.target.id == "def")
				{
					dispatchEvent(new events.SetDefaultValueEvent(this));
				}
				else if (event.target.id == "del")
				{
					delete container.removeElement(event.currentTarget as IVisualElement);
					onChange(null);
					if (container.numElements == 0)
						container.addElement(CreateNewElementButton());
				}
				else if (event.target.id == "add")
				{
					container.addElementAt(CreateElement(),
						container.getElementIndex(event.currentTarget as IVisualElement) + 1);
					onChange(null);
				}
				else if (event.target.id == "new")
				{
					for (var n:Number = 0; n < container.numElements; ++n)
						delete container.getElementAt(n);
					container.removeAllElements();
					container.addElement(CreateElement());
					onChange(null);
				}
			}
		]]>
	</fx:Script>
	<fx:Metadata>
		[Event(name="valueChanged", type="events.ValueChangedEvent")]
		[Event(name="setDefaultValue", type="events.SetDefaultValueEvent")]
		[ResourceBundle("panels")]
	</fx:Metadata>
	<mx:Image id="def" right="5" y="5" width="16" height="16" source="@Embed(source='images/revert.png')" toolTip="{resourceManager.getString('panels', 'DefaultSettings')}" useHandCursor="true" buttonMode="true" click="onClick(event)"/>
	<s:HGroup left="10" right="25" top="10" bottom="10">
		<s:Scroller width="100%" height="100%">
			<s:VGroup id="container" width="100%" height="100%" gap="-1"/>
		</s:Scroller>
	</s:HGroup>
</s:BorderContainer>
