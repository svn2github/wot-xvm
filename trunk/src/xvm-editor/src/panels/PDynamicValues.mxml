<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:c="components.*"
    width="100%" height="100%"
    borderVisible="false">
    <fx:Script>
        <![CDATA[
            import components.DefaultComponent;
            import components.DynamicAlphaEdit;
            import components.DynamicColorEdit;
            import components.DynamicVehicleNameEdit;
            
            import events.SetDefaultValueEvent;
            import events.ValueChangedEvent;
            
            import flash.events.Event;
            
            import mx.collections.ArrayCollection;
            import mx.collections.Sort;
            import mx.collections.SortField;
            import mx.core.IVisualElement;
            import mx.messaging.channels.StreamingAMFChannel;
            
            import utils.ConfigUtilsEditor;
            import utils.Embed;

            private var valueAsObject:Boolean = false;

            private function CreateNewElementButton():IVisualElement
            {
                var img:Image = new Image();
                img.width = 16;
                img.height = 16;
                img.id = "new";
                img.source = new Embed.add();
                img.toolTip = resourceManager.getString('panels', 'AddLine');
                img.useHandCursor = true;
                img.buttonMode = true;
                img.addEventListener(MouseEvent.CLICK, this.onClick);
                return img;
            }

            private function CreateElement(v:Object = null):DefaultComponent
            {
                var instance:DefaultComponent;
                switch (editorClass)
                {
                    case "DynamicAlphaEdit":
                        instance = new DynamicAlphaEdit();
                        instance.minimum = minimum;
                        instance.maximum = maximum;
                        break;
                    case "DynamicColorEdit":
                        instance = new DynamicColorEdit();
                        instance.minimum = minimum;
                        instance.maximum = maximum;
                        instance.stepSize = stepSize;
                        break;
                    case "DynamicVehicleNameEdit":
                        instance = new DynamicVehicleNameEdit();
                        break;
                    default:
                        throw new Error("Unknown editor class: " + editorClass);
                }

                instance.value = v;

                instance.addEventListener(Event.CHANGE, onChange);
                instance.addEventListener(MouseEvent.CLICK, onClick);
                return instance;
            }

            public function RefreshSource(src:* = null): void
            {
                if (!src)
                    src = ConfigUtilsEditor.GetValue(config);

                // Cleanup
                var len:int = container.numElements;
                for (var n:int = 0; n < len; ++n)
                    delete container.getElementAt(n);
                container.removeAllElements();

                // Create elements
                var data:Array;
                if (src is Array)
                {
                    valueAsObject = false;
                    data = src;
                }
                else
                {
                    valueAsObject = true;
                    data = [];
                    for (var name:String in src)
                        data.push({name: name, value: src[name] });

                    var list:ArrayCollection = new ArrayCollection(data);
                    var sort:Sort = new Sort();
                    sort.fields = [new SortField("name")];
                    list.sort = sort;
                    list.refresh();
                    data = list.toArray();
                }

                if (data.length == 0 && !valueAsObject)
                    container.addElement(CreateNewElementButton());
                else
                {
                    var len2:int = data.length;
                    for (var i:int = 0; i < len2; ++i)
                        container.addElement(CreateElement(data[i]));
                }
            }

            public function get value():*
            {
                if (valueAsObject)
                {
                    var o:Object = {};
                    for (var i:int = 0; i < container.numElements; ++i)
                    {
                        var v:Object = (container.getElementAt(i) as DefaultComponent).value;
                        o[v.name] = v.value;
                    }
                    return o;
                }
                else
                {
                    var a: Array = [];
                    for (var j:int = 0; j < container.numElements; ++j)
                        a.push((container.getElementAt(j) as DefaultComponent).value);
                    return a;
                }
            }

            // config
            [Bindable]
            public var config:String;

            // minimum
            [Bindable]
            public var minimum:Number = 0;

            // maximum
            [Bindable]
            public var maximum:Number = 100;

            // stepSize
            [Bindable]
            public var stepSize:Number = 1;

            // renderer
            [Bindable]
            public var editorClass:String;

            // onChange
            protected function onChange(event:Event):void
            {
                if (event)
                    event.stopPropagation();
                dispatchEvent(new events.ValueChangedEvent(this));
            }

            // add/del
            protected function onClick(event:MouseEvent):void
            {
                if (!event)
                    return;
                event.stopPropagation();
                if (event.target.id == "def")
                {
                    dispatchEvent(new events.SetDefaultValueEvent(this));
                }
                else if (event.target.id == "del")
                {
                    delete container.removeElement(event.currentTarget as IVisualElement);
                    onChange(null);
                    if (container.numElements == 0)
                        container.addElement(CreateNewElementButton());
                }
                else if (event.target.id == "add")
                {
                    container.addElementAt(CreateElement(),
                        container.getElementIndex(event.currentTarget as IVisualElement) + 1);
                    onChange(null);
                }
                else if (event.target.id == "new")
                {
                    for (var n:int = 0; n < container.numElements; ++n)
                        delete container.getElementAt(n);
                    container.removeAllElements();
                    container.addElement(CreateElement());
                    onChange(null);
                }
            }
        ]]>
    </fx:Script>
    <fx:Metadata>
        [Event(name="valueChanged", type="events.ValueChangedEvent")]
        [Event(name="setDefaultValue", type="events.SetDefaultValueEvent")]
        [ResourceBundle("panels")]
    </fx:Metadata>
    <mx:Image id="def" right="5" y="5" width="16" height="16" source="@Embed(source='images/revert.png')" toolTip="{resourceManager.getString('panels', 'DefaultSettings')}" useHandCursor="true" buttonMode="true" click="onClick(event)"/>
    <s:HGroup left="10" right="25" top="10" bottom="10">
        <s:Scroller width="100%" height="100%">
            <s:VGroup id="container" width="100%" height="100%" gap="-1"/>
        </s:Scroller>
    </s:HGroup>
</s:BorderContainer>
