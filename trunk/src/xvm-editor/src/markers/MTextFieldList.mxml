<?xml version="1.0" encoding="utf-8"?>
<c:PanelComponent
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:c="components.*"
	title="Текстовые поля"
	width="100%" height="100%"
	borderVisible="false">
	<fx:Script>
		<![CDATA[
			import components.DynamicTextFieldEdit;
			
			import mx.core.IVisualElement;
			
			import utils.Config;

			private var m_values:Object = {};
			
			[Embed(source="images/add.png")]
			private static var IMG_add : Class;

			public function get value():*
			{
				var a:Object = {}; 
				for (var v:Object in m_values)
				{
					for (var i:Number = 0; i < v.states.length; ++i)
					{
						var state:String = v.states[i];
						if (!a.hasOwnProperty(state))
							a[state] = [];
						a[state].push(v.values[i]);
					}
				}
				return a;
			}
			
			private function CreateNewElementButton():IVisualElement
			{
				var img:Image = new Image();
				img.width = 16;
				img.height = 16;
				img.id = "new";
				img.source = new IMG_add();
				img.toolTip = "Добавить текстовое поле";
				img.useHandCursor = true;
				img.buttonMode = true;
				img.addEventListener(MouseEvent.CLICK, this.onClick);
				return img;
			}
			
			private function CreateElement(v:String):DynamicTextFieldEdit
			{
				var instance:DynamicTextFieldEdit = new DynamicTextFieldEdit();
				instance.label = v;
				instance.labelWidth = "200";
				instance.width = 255;
				instance.group = rbg;
				instance.addEventListener(MouseEvent.CLICK, onClick);
				return instance;
			}

			public function RefreshSource(activeMarkerStates: Array): void
			{
				for (var n:Number = 0; n < container.numElements; ++n)
				{
					var e_old:DynamicTextFieldEdit = container.getElementAt(n) as DynamicTextFieldEdit; 
					if (e_old)
						e_old.group = null;
					delete container.getElementAt(n);
				}
				container.removeAllElements();

				m_values = {};
				var empty: Boolean = true;
				var unnamedCounter:Number = 0;
				for each (var state:String in activeMarkerStates)
				{
					var conf:String = "markers." + state + ".textFields";
					var v:Array = Config.GetValue(conf);
					for (var i:Number = 0; i < v.length; ++i)
					{
						empty = false;
						var value:Object = v[i];
						var name:String = value.name || value.format || "Текст " + (++unnamedCounter);
						if (!m_values.hasOwnProperty(name))
						{
							var e:DynamicTextFieldEdit = CreateElement(name);
							container.addElement(e);
							m_values[name] = { element: e, states: [], values: [] };
						}
						m_values[name].states.push(state);
						m_values[name].values.push(value);
					}
				}

				if (empty)
				{
					container.addElement(CreateNewElementButton());
					return;
				}
				else
				{
					var el:DynamicTextFieldEdit = container.getElementAt(0) as DynamicTextFieldEdit; 
					el.selected = true;
					this.RefreshElement(el.label);	
				}
			}

			protected function onRadioButtonChange(event:Event):void
			{
				RefreshElement(rbg.selectedValue.toString());
			}
			
			protected function RefreshElement(name:String):void
			{
				trace(name);
				/*
				//control.conflict = !valueOk;
				//control.value = value;
				
				for each (var mname:String in ElementControls[activeElement.id])
				{
				for each (var mname2:String in ElementControls[mname])
				{
				var control:LabeledComponent = this[mname][mname2] as LabeledComponent;
				
				//debug(mname + "." + mname2);
				var valueSet: Boolean = false;
				var value:*;
				var valueOk: Boolean = true;
				for each (var state:String in activeMarkerStates)
				{
				var conf:String = "markers." + state + "." + activeElement.id + "." + control.config;
				//debug("  " + conf + "=" + Config.GetValue(conf));
				//values.push(Config.GetValue(conf));
				if (!valueSet)
				{
				valueSet = true;
				value = Config.GetValue(conf);
				}
				else
				{
				if (value != Config.GetValue(conf))
				{
				valueOk = false;
				break;
				}
				}
				}
				
				control.conflict = !valueOk;
				control.value = value;
				}
				}
				
				
				*/
			}
			
/*			// config
			private var _config:String;

			[Bindable]
			public function get config():String
			{
				return _config;
			}
			public function set config(value:String): void
			{
				_config = value;
			}
*/
			// add/del
			protected function onClick(event:MouseEvent):void
			{
/*				if (event.target.id == "del")
				{
					container.removeElement(event.currentTarget as IVisualElement);
					onChange(null);
					if (container.numElements == 0)
						container.addElement(CreateNewElementButton());
				}
				else if (event.target.id == "add")
				{
					var index:Number = container.getElementIndex(event.currentTarget as IVisualElement) + 1;
					container.addElementAt(CreateElement("Текст " + index), index);
					onChange(null);
				}
				else if (event.target.id == "new")
				{
					container.removeAllElements();
					container.addElement(CreateElement("Текст 1"));
					onChange(null);
				}*/
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="rbg" change="onRadioButtonChange(event)"/>
	</fx:Declarations>
	<mx:Image right="5" y="-18" width="16" height="16" source="@Embed(source='images/cancel.png')" toolTip="Вернуть настройки по умолчанию" useHandCursor="true" buttonMode="true"/>
	<s:Scroller left="10" right="10" top="5" bottom="6">
		<s:VGroup id="container" width="100%" height="100%" gap="-1"/>
	</s:Scroller>
</c:PanelComponent>
