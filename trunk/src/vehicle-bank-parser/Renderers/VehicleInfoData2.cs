using System;
using System.Collections.Generic;

namespace VehicleBankParser.Renderers
{
    class VehicleInfoData2 : AbstractRenderer
    {
        public VehicleInfoData2()
        {
            OUTPUT_FILE = "src\\xvm-as2\\src\\com\\xvm\\VehicleInfoData2.as";
        }

        protected override String getHeader()
        {
            return
@"/**
* This file is automatically generated by VehicleBankParser program.
* Data extracted from WoT version 0.8.x
*/

class com.xvm.VehicleInfoData2
{
    /**
    * Vehicles in list has two turret modules.
    * Format:
    * vehicel name, stock max hp, turret status
    * Turret status: 2 - unable to mount top gun to stock turret, 1 - able
    */

    public static var data:Object = {
        //vname: { id, level, type, hpstock, hptop, turret, premium, nation, name, translationKey }";
        }

        protected override String getFooter()
        {
            return "}";
        }

        protected override void writeLines(List<Vehicle> vehList)
        {
            var level = 0;
            foreach (Vehicle veh in vehList)
            {
                if (veh.level != level)
                {
                    level = veh.level;
                    file.WriteLine("\n        // level " + level);
                }
                file.WriteLine("        " + parseVehicle(veh) + ",");
            }

            file.WriteLine(@"
        // unknown (FogOfWar)
        unknown: { level: 0, name: ""UNKNOWN"" }
    }");
            writeVidMapping(vehList);


        }

        private void writeVidMapping(List<Vehicle> vehList)
        {
            file.WriteLine("\n    public static var vidToVname:Object = {");
            foreach (Vehicle veh in vehList)
                file.WriteLine("        _" + veh.vid + ": \"" + veh.name.Replace("-", "_").ToLower() + "\",");
            file.WriteLine("        _stub_: \"\"\n    }");
        }

        public string parseVehicle(Vehicle veh)
        {
            return (String.Format("{0} {{ {1}{2}{3}{4}{5}{6}{7}{8}{9}{10} }}",
              (veh.name.Replace("-", "_").ToLower() + ":").PadRight(27),
              String.Format("id: {0},", veh.tankId).PadRight(9),
              String.Format("level: {0},", veh.level).PadRight(11),
              String.Format("type: \"{0}\", ", veh.getType()).PadRight(13),
              String.Format("hpstock: {0}, ", veh.hpstock).PadRight(15),
              String.Format("hptop: {0}, ", veh.hptop).PadRight(13),
              String.Format("turret: {0}, ", veh.status),
              String.Format("premium: {0}, ", (veh.premium ? "1" : "0")),
              String.Format("nation: \"{0}\", ", veh.nation).PadRight(19),
              String.Format("name: \"{0}\", ", veh.name).PadRight(37),
              String.Format("translationKey: \"{0}\"", veh.shortUserString)
              ));
        }

    }
}
