#!/usr/bin/env python2

""" This is XVM FUSE driver implementation with additional features
    required for XVM mod.

    XVM is popular mod for 'Worls of Tanks' MMO game.
    Original mod is located at http://code.google.com/p/wot-xvm/

    This code is distributed under GNU GPL v3 public license.
"""

import fuse
import os, sys, stat, errno
import threading, time
import logging, traceback
import re, base64, json
from fuse import Fuse
from datetime import datetime
from random import randint
from urllib2 import urlopen
from xml.dom import minidom

""" Global constants and variables section.
"""

# Based on XVM 3.1.2, SVN rev. 1104
# Last change of xvm-stat: SVN rev. 1315

XVMFS_VERSION = '0.2.1'
fuse.fuse_python_api = (0, 2)

# Logging configuration.
# Log level is set to logging.INFO by default.
# Use mount option 'debug' to get more detailed logs.
# The log files are created in the current directory by default.
# Use '-o log_dir=...' option to override it.
# Example:
# $ xvmfs -o debug -o log_dir=/tmp/xvm res_mods/.stat
LOG_DIR = '.'
XVM_LOG = 'xvmfs.log'
XVM_STAT_LOG = 'xvmfs-stat.log'
Log = None
LogStat = None

# Original XVM config file holds the list of available XVM proxies
DEFAULT_XVM_CFG = 'xvm-stat.exe.config'
DEFAULT_WOT_CFG = 'WOTLauncher.cfg'

# Original xvm-stat.exe tells the name of its current folder (which should be the folder
# with WoT binaries) to it's ingame components.
# Make them happy.
WINE_GAME_DIR = 'C:\\Games\\World_of_Tanks'

# Components of virtual FS
README_PATH = '/README'
README_DATA = """This is README virtual file content.
This file indicates that XVM filesystem is mounted into current folder.

The XvmFS can be unmounted by issuing following command:
 $ fusermount -u <mount point>
where <mount point> is (you'll never guess) the path to the folder
which contains this file.
"""
DIR_ITEMS = ['.', '..', README_PATH[1:]]

# All XVM commands begins with following prefix.
BEGIN_CMD = '/@'

# Used to choose some fast proxies from available proxy pool
PING_THRESHOLD = 500

lock = threading.RLock()
lockIngame = threading.RLock()

""" Classes definition section.
"""
class XvmStat(fuse.Stat):
    def __init__(self):
        self.st_mode = 0
        self.st_ino = 0
        self.st_dev = 0
        self.st_nlink = 0
        self.st_uid = os.getuid()
        self.st_gid = os.getgid()
        self.st_size = 0
        self.st_atime = 0
        self.st_mtime = 0
        self.st_ctime = 0

class XvmFS(Fuse):
    # FUSE interface implementation

    def __init__(self, *args, **kw):
        self._start_time_unix = time.mktime(datetime.now().timetuple())
        self.result = ''
        self.command = None
        self.logString = None
        self.logLength = 0
        self.vars = {}
        self.requests = []
        self.xvm_cfg = DEFAULT_XVM_CFG
        self.wot_cfg = DEFAULT_WOT_CFG
        self.game_dir = WINE_GAME_DIR
        self.cache = {}
        self.modInfo = None
        self.debug = False
        self.log_dir = LOG_DIR
        self.timeout = 10000

        Fuse.__init__(self, *args, **kw)

    def init(self):
        try:
            Log.info('')
            Log.info("XvmFS %s is started." % XVMFS_VERSION)

            self.check_params()
            self.version = self.GetVersion()
            self.proxies = self.GetProxyAddresses()

        except Exception, ex:
            Log.debug('XvmFS init exception:\n' + traceback.format_exc(ex))
            raise

    def fsinit(self):
        Log.debug('xvm_cfg is ' + str(self.xvm_cfg))
        Log.debug('wot_cfg is ' + str(self.wot_cfg))
        Log.debug('game_dir is ' + str(self.game_dir))

    def getattr(self, path):
        st = XvmStat()
        st.st_ctime = self._start_time_unix

        if path == '/':
            st.st_mode = stat.S_IFDIR | 0755
            st.st_nlink = 2
        elif path == README_PATH:
            st.st_mode = stat.S_IFREG | 0444
            st.st_nlink = 1
            st.st_size = len(README_DATA)
        elif path[:2] == BEGIN_CMD:
            self.xvm_exec_cmd(path[1:].upper())
            st.st_mode = stat.S_IFREG | 0444
            st.st_nlink = 1
            st.st_size = len(self.result) if self.result is not None else 0
            st.st_mtime = time.mktime(datetime.now().timetuple())
        else:
            return -errno.ENOENT

        return st

    def readdir(self, path, offset):
        for d in DIR_ITEMS:
            yield fuse.Direntry(d)

    def open(self, path, flags):
        if path != README_PATH and path[:2] != BEGIN_CMD:
            return -errno.ENOENT

        accmode = os.O_RDONLY | os.O_WRONLY | os.O_RDWR
        if (flags & accmode) != os.O_RDONLY:
            return -errno.EACCES

    def read(self, path, size, offset):
        if path == README_PATH:
            data = README_DATA
        elif path[:2] == BEGIN_CMD:
            data = self.result
        else:

            return -errno.ENOENT

        if data is None:
            return ''

        slen = len(data)
        if offset < slen:
            if offset + size > slen:
                size = slen - offset
            buf = data[offset:offset+size]
        else:
            buf = ''

        return buf

    """ XVM command handling
    """

    def xvm_exec_cmd(self, command):
        if command == self.command:
            return

        lock.acquire()

        self.command = command
        self.result = ''

        cmd = command.split()
        command = cmd[0]
        parameters = cmd[1] if len(cmd) > 1 else ''

        if not command.startswith('@LOG'):
            Log.info("=> %s %s" % (command, parameters))

        try:
            if command == '@LOG':
                self.ProcessLog(parameters, Log)

            elif command == '@LOGSTAT':
                self.ProcessLog(parameters, LogStat)

            elif command == '@VAR':
                v = parameters.split('=')
                if len(v) < 2:
                    raise Exception('Bad variable received: ' + parameters)

                Log.info("SET VAR: " + parameters)
                self.vars[v[0].strip()] = v[1]

            elif command in ['@SET', '@ADD']:
                if command == '@SET':
                    self.requests.append(dict(players=[], result=None, thread=None))

                threading.Thread(target=self.AddPendingPlayers,
                        args=(parameters,)).start()
                self.result = """{"resultId":%d}""" % (len(self.requests) - 1)

            elif command == '@RUN':
                if len(self.requests) <= 0:
                    raise Exception('No request')
                try:
                    self.result = self.requests[-1]['result'] = self.GetStat(
                            self.requests[-1])
                    self.result = json.dumps(self.result)

                except Exception, ex:
                    Log.error("Exception during @RUN command: " + str(ex))
                    Log.debug("\n" + traceback.format_exc(ex))

            elif command == '@GET_LAST_STAT':
                if len(self.requests) <= 0:
                    raise Exception('No request')
                self.result = json.dumps(self.requests[-1]['result'])

            elif command == '@RUN_ASYNC':
                if parameters in [None, '']:
                    raise Exception('Empty resultId')

                resultId = int(parameters.split()[0])
                if not 0 <= resultId < len(self.requests):
                   raise Exception("Invalid resultId %d" % resultId)

                request = self.requests[resultId]

                if request['result'] not in [None, '']:
                    self.result = json.dumps(request['result'])
                else:
                    if request['thread'] is None:
                        t = threading.Thread(target=self.xvm_run_async, args=(resultId,))
                        self.requests[resultId]['thread'] = t
                        Log.debug('Starting new thread for xvm_run_async')
                        t.start()
                        Log.debug('New thread for xvm_run_async is started')

                    self.result = """{"status":"NOT_READY"}"""

            elif command == '@GET_VERSION':
                result = [self.version, self.game_dir]
                result = result + ["%s=%s" % (key, value)
                        for (key, value) in self.vars.items()]

                self.result = '\n'.join(result)

            else:
                Log.info('Unknown command: ' + command)

            if self.result == None:
                self.result = ''
            elif self.result != '':
                Log.debug("result: " + self.result)

        except Exception,ex:
            Log.error("xvm_exec_cmd: exception during %s: %s" % (str(command), str(ex)))
            Log.debug('\n' + traceback.format_exc(ex))
        finally:
            lock.release()

    def xvm_run_async(self, resultId):
        Log.debug('Executing xvm_run_async, obtaining lockIngame...')
        lockIngame.acquire()
        Log.debug('Got lockIngame for xvm_run_async')
        try:
            self.requests[resultId]['result'] = self.GetStat(self.requests[resultId])
            Log.debug('Loaded: %d' % resultId )

        except Exception, ex:
            Log.error('Exception in xvm_run_async: ' + str(ex))
            Log.debug('\n' + traceback.format_exc(ex))

        finally:
            Log.debug('Releasing lockIngame from xvm_run_async')
            lockIngame.release()

    """ Network operations
    """

    def GetVersion(self):
        Log.debug('GetVersion: current dir is ' + os.path.abspath('.'))
        wotVersion = 'RU'

        try:
            xmldoc = minidom.parse(self.wot_cfg)
            xnl = xmldoc.documentElement.getElementsByTagName('patch_info_urls')[0].childNodes

            for url in [x.firstChild.wholeText for x in xnl
                    if x.nodeType == x.ELEMENT_NODE
                        and x.firstChild.nodeType == x.TEXT_NODE]:

                if (url.rfind('http://update.wot.ru.wargaming.net') > -1
                        or url.rfind('http://update.worldoftanks.ru') > -1):
                    wotVersion = 'RU'
                elif url.rfind('http://update.worldoftanks.com') > -1:
                    wotVersion = 'US'
                elif url.rfind('http://update.worldoftanks.eu') > -1:
                    wotVersion = 'EU'
                elif url.rfind('http://update.worldoftanks.cn') > -1:
                    wotVersion = 'CN'
                elif url.rfind('http://update.worldoftanks-sea.com') > -1:
                    wotVersion = 'SEA'
                elif url.rfind('http://update.worldoftanks.vn') > -1:
                    wotVersion = 'VTC'
                elif url.rfind('http://update-ct.wargaming.net/') > -1:
                    wotVersion = 'CT'

        except Exception, ex:
            Log.debug("GetVersion exception: %s\n%s" % (str(ex),
                    traceback.format_exc(ex)))
            raise Exception('Failed to parse config file: ' + str(ex))

        wotVersion = wotVersion.upper()
        Log.info('GetVersion: server version = ' + wotVersion)
        return wotVersion

    def GetProxyAddresses(self):
        """ Actually, this method is (and should be) used to parse
            XVM config file.
        """
        if not os.path.isfile(self.xvm_cfg):
            raise Exception('XVM config file was not found.')

        # Retrieve raw proxy list from XVM config file
        allProxies = []
        try:
            xmldoc = minidom.parse(self.xvm_cfg)
            xs = [x for x in xmldoc.getElementsByTagName('setting')
                    if x.getAttribute('name') == 'ProxyServers'][0]
            xv = xs.getElementsByTagName('value')[0]
            allProxies = [x.firstChild.wholeText
                    for x in xv.getElementsByTagName('string')
                        if x.nodeType == x.ELEMENT_NODE
                            and x.firstChild.nodeType == x.TEXT_NODE]

            # Also read timeout value from the same config file.
            xs = [x for x in xmldoc.getElementsByTagName('setting')
                    if x.getAttribute('name') == 'Timeout'][0]
            timeout = xs.getElementsByTagName('value')[0].firstChild.wholeText
            self.timeout = int(timeout)

        except Exception, ex:
            Log.error('Exception during XML parsing: ' + str(ex))
            Log.debug("\n" + traceback.format_exc(ex))
            return []

        # Find suitable proxies for current region
        ps = []
        for server in allProxies:
            s = [x for x in re.split(' |\t', server) if len(x) > 0]
            if len(s) >= 2 and s[0].upper() == self.version:
               ps.append(s[1])

            if len(s) >= 2 and self.version == 'CT' and s[0].upper == 'RU':
                ps.append(s[1])

        if len(ps) <= 0:
            raise Exception("Cannot find proxy server for '%s' in config"
                    % self.version)

        # Measure proxy latency
        proxyUrls = {}
        for addr in ps:
            tempUrl = base64.b64decode(addr)
            tmpTime = None

            try:
                testId = 'test' if self.version.startswith('CN') else '001'
                data, tmpTime = self.loadUrl(tempUrl, testId, True)
            except:
                Log.info("Exception: " + str(ex))

            proxyUrls[tempUrl] = tmpTime

        # Select a bunch of fastest proxies found
        minTime = min(proxyUrls.values())
        proxyUrl = [x for x in proxyUrls
                if proxyUrls[x] - minTime < PING_THRESHOLD]

        Log.debug('Acceptable proxies = ' + str(proxyUrl))

        """ However, novadays only 3 XVM proxy servers exist, and 2 of them
            are exclusively for China. So, the other part of the world uses
            explicitly one proxy server.

            The calculations above will be handy in future.
            Maybe.
        """

        return proxyUrl

    def loadUrl(self, url, members, test=False):
        if not test:
            Log.info('HTTP: ' + str(members))

        url = url.replace('%1', members)
        Log.debug('loadUrl: ' + url )

        duration = None
        responseFromServer = ''
        startTime = datetime.now()
        response = None

        try:
            response = urlopen(url=url, timeout=self.timeout / 1000)
            code = response.getcode()

            if code in [200, 202]:
                # 200 OK, 202 Accepted
                responseFromServer = response.read()

        except Exception, ex:
            Log.error('loadUrl failed: ' + str(ex))
        finally:
            if response != None:
                response.close()

        elapsed = datetime.now() - startTime
        msec = elapsed.seconds * 1000 + elapsed.microseconds / 1000
        Log.info("  Time: %d ms, Size: %d bytes" % (msec, len(responseFromServer)))
        Log.debug('responseFromServer: ' + responseFromServer)

        if not responseFromServer.lower().startswith('onexception'):
            duration = msec

        return responseFromServer, duration

    """ Stat operations
    """

    def AddPendingPlayers(self, parameters):
        try:
            Log.debug('Executing AddPendingPlayer, obtaining lockIngame...')
            lockIngame.acquire()
            Log.debug('Got lockIngame for AddPendingPlayers')

            for chunk in parameters.split(','):
                param = [i for i in chunk.split('=') if len(i) > 0]
                if len(param) != 2:
                    continue

                id = long(param[0])
                found = next((x for x in self.requests[-1]['players']
                        if x['id'] == id), None)

                if found is not None:
                    continue

                param2 = [i for i in param[1].split('&') if len(i) > 0]
                full_name = re.split('\[|\]', param2[0])
                name = full_name[0]
                clan = full_name[1] if len(full_name) > 1 else ''
                vname = param2[1] if len(param2) > 1 else ''

                try:
                    me = int(param2[2])
                except Exception, ex:
                    me = 0

                self.requests[-1]['players'].append(dict(id=id, name=name,
                        clan=clan, vn=vname, me=me))

        except Exception, ex:
            Log.error(str(ex))
            Log.debug("\n" + traceback.format_exc(ex))
        finally:
            Log.debug('Releasing lockIngame from AddPendingPlayers')
            lockIngame.release()

    def GetStat(self, req):
        self.PrepareStat(req)
        res = dict(players=[], info=dict(xvm=self.modInfo))

        for pd in req['players']:
            cacheKey = "%d=%s" % (pd['id'], pd['vn'])

            if self.cache.has_key(cacheKey):
                item = self.cache[cacheKey]['stat']
                item['name'] = pd['name']
                res['players'].append(item)

        return res

    def PrepareStat(self, req):
        requestList = []

        for pd in req['players']:
            cacheKey = "%(id)d=%(vn)s" % pd

            if self.cache.has_key(cacheKey):
                currentMember = self.cache[cacheKey]

                if currentMember['notInDb']:
                    Log.info("NOT IN DB - %(id)d %(name)s %(vn)s" % pd)
                continue

            if pd['vn'] in [None, '']:
                requestList.append(str(pd['id']))
            else:
                requestList.append("%d=%s%s" % (pd['id'], pd['vn'],
                        '=1' if pd['me'] == 1 else ''))

        updateRequest = ','.join(requestList)
        if len(updateRequest) <= 0:
            return

        if self.proxies is None or len(self.proxies) <= 0:
            Log.warning('Cannot read statistics: no suitable proxy was found.')
            return

        try:
            updateRequest = updateRequest.replace('?', '%3F')
            proxy = self.proxies[randint(0, len(self.proxies) - 1)]
            responseFromServer, duration = self.loadUrl(proxy, updateRequest)

            if len(responseFromServer) <= 0:
                Log.warning('Empty response or parsing error')
                return

            data = json.loads(responseFromServer.replace('\n', '\\n'))
            if not data.has_key('players'):
                Log.warning('Stat request failed: ' + str(responseFromServer))
                return

            info = data['info'][self.version] if data.has_key('info') else None
            res = dict(players=data['players'], info=None)

            if info is not None:
                self.modInfo = info

            stat_v_stub = dict(b=0, d=0, f=0, l=0, s=0, w=0, name='')

            for stat in data['players']:
                if not stat.has_key('name') or len(stat['name']) <= 0:
                    continue
                if not stat.has_key('v'):
                    stat['v'] = stat_v_stub

                """ Convert tree-ish data structure to flat, and modify key names.
                    The same job does 'JsonDataToResponse' method in original XVM.
                    Item conversion format is: (JSON key, XVM key, default value)
                """
                keys1 = (('id', 'id', 0)
                    , ('name', 'name', '')
                    , ('vname', 'vn', '')
                    , ('battles', 'b', 0)
                    , ('wins', 'w', 0)
                    , ('eff', 'e', 0)
                    , ('spo', 'spo', 0)
                    , ('hip', 'hip', 0)
                    , ('cap', 'cap', 0)
                    , ('dmg', 'dmg', 0)
                    , ('frg', 'frg', 0)
                    , ('def', 'def', 0)
                    , ('lvl', 'avglvl', 0)
                    , ('wn', 'wn', 0)
                    , ('twr', 'twr', 0)
                )

                keys2 = (('b', 'tb', 0)
                    , ('w', 'tw', 0)
                    , ('l', 'tl', 0)
                    , ('s', 'ts', 0)
                    , ('d', 'td', 0)
                    , ('f', 'tf', 0)
                )

                stat = dict([(y, stat[x]) if stat.has_key(x) else (y, z)
                                for (x,y,z) in keys1]
                    + [(y, stat['v'][x]) if stat['v'].has_key(x) else (y, z)
                                for (x,y,z) in keys2])

                cacheKey = "%d=%s" % (stat['id'], stat['vn'] or '')
                self.cache[cacheKey] = dict(stat=stat, notInDb=False)

                pd = next((x for x in req['players'] if x['id'] == stat['id']), None)
                if pd is not None:
                    self.cache[cacheKey]['stat']['clan'] = pd['clan']

            for pd in req['players']:
                cacheKey = "%(id)d=%(vn)s" % pd
                if self.cache.has_key(cacheKey):
                    continue

                Log.debug("Player [%(id)s] %(vn)s not in Database" % pd)

                self.cache[cacheKey] = dict(notInDB=True, stat=dict(
                        id=pd['id'],
                        name=pd['name'],
                        vname=pd['vn'],
                        clan=pd['clan']))

        except Exception, ex:
            Log.error('PrepareStat exception: ' + str(ex))
            Log.debug("\n" + traceback.format_exc(ex))

    """ Log processing
    """

    def ProcessLog(self, parameters, logger):
        if parameters.find(',') >= 0:
            if self.logString not in [None, '']:
                Log.warning('Incomplete @LOG string')
                self.DecodeAndPrintLogString(logger)

            self.logString = ''

            try:
                strArray = parameters.split(',')
                self.logLength = int(strArray[0], 16)
                parameters = strArray[1]

            except Exception,ex:
                self.logLength = 0
                Log.error('Error parsing @LOG command parameters')

        if self.logLength == 0:
            return

        self.logString = self.logString + parameters
        if self.logLength <= len(self.logString):
            self.DecodeAndPrintLogString(logger)

    def DecodeAndPrintLogString(self, logger):
        try:
            msg = self.logString.decode('hex')
            logger.info(msg)

        except Exception, ex:
            cmd = '@LOG' if logger.name == 'XVM' else '@LOGSTAT'
            Log.error("Error decoding %s string %s" % (cmd, self.logString))
            Log.debug('\n' + traceback.format_exc(ex))

        finally:
            self.logLength = 0
            self.logString = ''

    """ Compatibility support
    """

    def check_params(self):
        """Validate XvmFS properties after arguments were parsed"""
        wot_cfg = locate_file(self.wot_cfg)
        xvm_cfg = locate_file(self.xvm_cfg)

        if wot_cfg is None:
            raise Exception("WoT config file '%s' was not found." % self.wot_cfg)
        elif xvm_cfg is None:
            raise Exception("XVM config file '%s' was not found." % self.xvm_cfg)

        self.wot_cfg = wot_cfg
        self.xvm_cfg = xvm_cfg


""" Entry point
"""
def main():
    server = XvmFS(version="%prog " + fuse.__version__,
            usage=Fuse.fusage,
            dash_s_do='setsingle')

    server.parser.add_option(mountopt='xvm_cfg', metavar='FILE',
            help="XVM proxy config file. Default is '%s'" % DEFAULT_XVM_CFG,
            default=DEFAULT_XVM_CFG)

    server.parser.add_option(mountopt='wot_cfg', metavar='FILE',
            help="WoT Launcher config file. Default is '%s'" % DEFAULT_WOT_CFG,
            default=DEFAULT_WOT_CFG)

    server.parser.add_option(mountopt='game_dir', metavar='DIR',
            help='The path to the game folder as it is displayed into Wine.'
                + " Default is '%s'" % WINE_GAME_DIR,
            default=WINE_GAME_DIR)

    server.parser.add_option(mountopt='log_dir', metavar='DIR', default=LOG_DIR,
            help="Directory for log files. Default is current directory.")

    server.parser.add_option(mountopt='debug', action='store_true',
            help='Enable detailed logging')

    server.parse(values=server, errex=1)

    if server.fuse_args.mount_expected():
        if len(sys.argv) <= 1:
            print >> sys.stderr, "xvmfs: missing mountpoint parameter." + \
                    "\nSee `xvmfs -h' for usage"
            sys.exit(1)

        configureLoggers(server.log_dir,
                logging.DEBUG if server.debug else logging.INFO)
        server.init()

    server.main()

def configureLoggers(logDir, level):
    """Create and customize logger objects"""
    global Log, LogStat

    if not os.path.isfile(logDir) and not os.path.isdir(logDir):
        os.makedirs(logDir)

    formatter = logging.Formatter("%(asctime)s %(levelname)-7s: %(message)s")
    handler = logging.FileHandler(os.path.join(logDir, XVM_LOG), mode='w')
    handler.setFormatter(formatter)

    Log = logging.getLogger('XVM')
    Log.setLevel(level)
    Log.addHandler(handler)

    handler = logging.FileHandler(os.path.join(logDir, XVM_STAT_LOG), mode='w')
    handler.setFormatter(formatter)

    LogStat = logging.getLogger('XVM-STAT')
    LogStat.setLevel(level)
    LogStat.addHandler(handler)

def locate_file(filename):
    """Treat config file names in case-insensitive way"""

    if filename is None or os.path.isfile(filename):
        return filename

    fpath = os.path.abspath(filename)
    fdir, fname = os.path.split(fpath)

    if os.path.isfile(fpath):
        return fpath

    if not os.path.isdir(fdir):
        return None

    fname = fname.lower()
    found = next((x for x in os.listdir(fdir) if x.lower() == fname), None)

    return found

if __name__ == '__main__':
    main()

