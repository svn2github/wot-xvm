<?xml version="1.0" encoding="utf-8"?>
<s:VGroup
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:c="components.*"
    xmlns:m="markers.*"
    x="0" y="0" width="100%" height="100%" gap="-1">
    <fx:Metadata>
        [ResourceBundle("markers")]
    </fx:Metadata>
    <fx:Script>
        <![CDATA[
            import components.DefaultComponent;
            import components.DynamicTextFieldEdit;
            
            import events.SetDefaultValueEvent;
            import events.ValueChangedEvent;
            
            import flash.events.Event;
            
            import mx.controls.Image;
            import mx.core.IVisualElement;
            
            import spark.components.ToggleButton;
            
			import utils.ConfigUtilsEditor;
            import utils.DefaultConfig;
            import utils.Embed;
            import utils.Utils;

            private var m_activeMarkerStates:Array = null;
            private var m_names:Array = [];
            private var m_values:Object = {};

            [Bindable(event="languageChanged")]
            public function _m(s:String):String
            {
                return resourceManager.getString('markers', s);
            }

            [Bindable]
            public var config:String = null;

            public function get value():*
            {
                var a:Object = {};
                for each (var state:String in this.m_activeMarkerStates)
                    a[state] = [];
                for (var n:int = 0; n < m_names.length; ++n)
                {
                    var v:Object = m_values[m_names[n]];
                    for (var i:int = 0; i < v.states.length; ++i)
                        a[v.states[i]].push(v.values[i]);
                }
                return a;
            }

            protected function onChange(event: Event):void
            {
                if (event)
                    event.stopPropagation();
                dispatchEvent(new events.ValueChangedEvent(this));
            }

            private function CreateNewElementButton():IVisualElement
            {
                var img:Image = new Image();
                img.width = 16;
                img.height = 16;
                img.id = "new";
                img.source = new Embed.add();
                img.toolTip = _m('AddTextField');
                img.useHandCursor = true;
                img.buttonMode = true;
                img.addEventListener(MouseEvent.CLICK, onClick);
                return img;
            }

            private function CreateElement(v:String):DynamicTextFieldEdit
            {
                var instance:DynamicTextFieldEdit = new DynamicTextFieldEdit();
                instance.label = v;
                instance.labelWidth = "180";
                instance.width = 255;
                instance.group = rbg;
                instance.addEventListener(MouseEvent.CLICK, onClick);
                return instance;
            }

            public function RefreshSource(activeMarkerStates: Array): void
            {
                m_activeMarkerStates = activeMarkerStates;

                var saved_label:String = rbg && rbg.selectedValue ? rbg.selectedValue.toString() : null;

                for (var n:int = 0; n < container.numElements; ++n)
                {
                    var e_old:DynamicTextFieldEdit = container.getElementAt(n) as DynamicTextFieldEdit;
                    if (e_old)
                        e_old.group = null;
                    delete container.getElementAt(n);
                }
                container.removeAllElements();

                m_names = [];
                m_values = {};
                var empty: Boolean = true;
                var unnamedCounter:int = 0;
                for each (var state:String in activeMarkerStates)
                {
                    var conf:String = "markers." + state + ".textFields";
                    var v:Array = ConfigUtilsEditor.GetValue(conf);
                    for (var i:int = 0; i < v.length; ++i)
                    {
                        empty = false;
                        var value:Object = v[i];
                        var name:String = value.name || value.format || _m('Text') + " " + (++unnamedCounter);
                        if (!m_values.hasOwnProperty(name))
                        {
                            var e:DynamicTextFieldEdit = CreateElement(name);
                            container.addElement(e);
                            m_names.push(name);
                            m_values[name] = { element: e, states: [], values: [] };
                        }
                        m_values[name].states.push(state);
                        m_values[name].values.push(value);
                    }
                }

                if (empty)
                {
                    this.RefreshElement(null);
                    container.addElement(CreateNewElementButton());
                }
                else
                {
                    var selected:DynamicTextFieldEdit = null;
                    for (var j:int = 0; j < container.numElements; ++j)
                    {
                        var el:DynamicTextFieldEdit = container.getElementAt(j) as DynamicTextFieldEdit;
                        if (el.label == saved_label)
                            selected = el;
                        el.conflict = m_values[el.label].states.length != m_activeMarkerStates.length;
                    }
                    if (!selected)
                        selected = container.getElementAt(0) as DynamicTextFieldEdit;
                    selected.selected = true;
                    this.RefreshElement(selected.label);
                }
            }

            protected function onRadioButtonChange(event:Event):void
            {
                RefreshElement(rbg.selectedValue.toString());
            }

            public const ElementControls:Object = {
                textFields: [ "m_textField", "m_textField_font", "m_textField_shadow" ],
                m_textField: [ "v_visible", "v_name", "v_x", "v_y", "v_alpha", "v_color", "v_format" ],
                m_textField_font: [ "v_name", "v_size", "v_align", "v_bold", "v_italic" ],
                m_textField_shadow: [ "v_size", "v_strength", "v_angle", "v_distance", "v_color", "v_alpha" ]
            };

            protected function RefreshElement(name:String):void
            {
                //trace(name);
                var values:Object = name ? m_values[name] : null;
                for each (var mname:String in ElementControls.textFields)
                {
                    this[mname].enabled = name != null;
                    for each (var mname2:String in ElementControls[mname])
                    {
                        var control:DefaultComponent = this[mname][mname2] as DefaultComponent;

                        if (!values)
                        {
                            control.value = null;
                            continue;
                        }

                        //trace(mname + "." + mname2);
                        var valueSet: Boolean = false;
                        var value:*;
                        var valueOk: Boolean = true;
                        for each (var curValues:Object in values.values)
                        {
                            var curValue:Object = ConfigUtilsEditor.GetValue(control.config, curValues);
                            if (!valueSet)
                            {
                                valueSet = true;
                                value = curValue;
                            }
                            else
                            {
                                if (value != curValue)
                                {
                                    valueOk = false;
                                    break;
                                }
                            }
                        }

                        control.conflict = !valueOk;
                        control.value = value;
                    }
                }
            }

            public function updateValue(event:ValueChangedEvent):void
            {
                try
                {
                    event.stopPropagation();

                    if (!event.sender.config)
                    {
                        trace("ERROR: config is null for: " + event.sender.id);
                        return;
                    }

                    if (rbg.selectedValue != null)
                    {
                        var activeValue:Object = m_values[rbg.selectedValue.toString()];
                        for each (var value:Object in activeValue.values)
							ConfigUtilsEditor.SetValue(event.sender.config, event.sender.value, value);
                    }

                    onChange(null);

                    if (event.sender.config == "name")
                    {
                        (activeValue.element as DynamicTextFieldEdit).label = event.sender.value;
                        RefreshSource(m_activeMarkerStates);
                    }
                }
                catch (ex:Error)
                {
                    trace("ERROR: MTextFieldList.updateValue(): " + ex.toString());
                }
            }

            protected function setDefaultValue(event:SetDefaultValueEvent):void
            {
                try
                {
                    event.stopPropagation();

                    if (!event.sender.config)
                    {
                        trace("ERROR: config is null for: " + event.sender.id);
                        return;
                    }

                    var activeValue:Object = m_values[rbg.selectedValue.toString()];
                    for (var i:int = 0; i < activeValue.values.length; ++i)
                    {
                        if (event.target.config == "textField")
                        {
                            var defValue:Object = DefaultConfig.vehicleName_alive;
                            defValue.name = activeValue.values[i].name;
                            defValue.format = activeValue.values[i].format;
                            defValue.font = activeValue.values[i].font;
                            defValue.shadow = activeValue.values[i].shadow;
                            activeValue.values[i] = defValue;
                        }
                        else if (event.target.config == "textField.font")
                            activeValue.values[i].font = DefaultConfig.font_13;
                        else if (event.target.config == "textField.shadow")
                            activeValue.values[i].shadow = DefaultConfig.shadow_200;
                        else
                        {
                            trace("ERROR: unknown target config: " + event.target.config);
                            return;
                        }
                    }

                    onChange(null);
                    RefreshSource(m_activeMarkerStates);
                }
                catch (ex:Error)
                {
                    trace("ERROR: setDefaultValue(): " + ex.toString());
                }
            }

            // add/del
            protected function onClick(event:MouseEvent):void
            {
                var e:DynamicTextFieldEdit = event.currentTarget as DynamicTextFieldEdit;
                if (event.target.id == "del")
                {
                    m_names.splice(m_names.indexOf(e.label), 1);
                    delete m_values[e.label];
                }
                else if (event.target.id == "copy")
                {
                    for (var i:int = 0; i < this.m_activeMarkerStates.length; ++i)
                    {
                        var state:String = m_activeMarkerStates[i];
                        if (m_values[e.label].states.indexOf(state) == -1)
                        {
                            m_values[e.label].states.push(state);
                            m_values[e.label].values.push(m_values[e.label].values[0]);
                        }
                        else if (i != 0)
                        {
                            m_values[e.label].values[i] = m_values[e.label].values[0];
                        }
                    }
                }
                else if (event.target.id == "add" || event.target.id == "new")
                {
                    var n:int = 0;
                    var name:String;
                    do { name = _m('Text') + " " + (++n); } while (m_values.hasOwnProperty(name));
                    m_names.push(name);
                    m_values[name] = { element: null, states: this.m_activeMarkerStates, values: [] };
                    var defValue:Object = DefaultConfig.vehicleName_alive;
                    defValue.name = name;
                    defValue.format = _m('TEXT');
                    defValue.x = 0;
                    defValue.y = 0;
                    for (var j:int = 0; j < m_values[name].states.length; ++j)
                        m_values[name].values.push(defValue);
                }
                else
                    return;

                event.stopPropagation();

                onChange(null);
                RefreshSource(m_activeMarkerStates);
            }
        ]]>
    </fx:Script>
    <fx:Metadata>
        [Event(name="valueChanged", type="events.ValueChangedEvent")]
        [Event(name="setDefaultValue", type="events.SetDefaultValueEvent")]
    </fx:Metadata>
    <fx:Declarations>
        <s:RadioButtonGroup id="rbg" change="onRadioButtonChange(event)"/>
    </fx:Declarations>
    <c:PanelComponent title="{_m('TextFields')}" width="100%" height="100" setDefaultValue="dispatchEvent(new events.SetDefaultValueEvent(this))">
        <s:Scroller width="100%" height="100%">
            <s:VGroup id="container" width="100%" height="100%" gap="-1"/>
        </s:Scroller>
    </c:PanelComponent>
    <m:MTextField id="m_textField" config="textField" valueChanged="updateValue(event)" setDefaultValue="setDefaultValue(event)"/>
    <m:MFont id="m_textField_font" config="textField.font" valueChanged="updateValue(event)" setDefaultValue="setDefaultValue(event)"/>
    <m:MShadow id="m_textField_shadow" config="textField.shadow" valueChanged="updateValue(event)" setDefaultValue="setDefaultValue(event)"/>
</s:VGroup>
