using System;
using System.Collections.Generic;

namespace VehicleBankParser.Renderers
{
    class VehicleInfoData2AS3 : AbstractRenderer
    {
        public VehicleInfoData2AS3()
        {
            OUTPUT_FILE = "src\\xvm\\xvm\\com\\xvm\\vehinfo\\VehicleInfoData2.as";
        }

        protected override String getHeader()
        {
            return
@"/**
* This file is automatically generated by VehicleBankParser program.
* Data extracted from WoT version 0.8.0
*/
package com.xvm.vehinfo
{
    import flash.utils.Dictionary;

    public class VehicleInfoData2
    {
        private static var _data:Dictionary = null;
        public static function get data():Dictionary
        {
            if (_data == null)
                _data = _initData();
            return _data;
        }

        private static var _vidToVname:Array = null;
        public static function get vidToVname():Array
        {
            if (_vidToVname == null)
                _vidToVname = _initVidToVname();
            return _vidToVname;
        }

        // private

        /**
        * Vehicles in list has two turret modules.
        * Format:
        * vehicel name, stock max hp, turret status
        * Turret status: 2 - unable to mount top gun to stock turret, 1 - able
        */

        private static function _initData():Dictionary
        {
            var d:Dictionary = new Dictionary();

            //vname: { id, level, type, hpstock, hptop, turret, premium, nation, name, translationKey }";
        }

        protected override String getFooter()
        {
            return
@"
            return a;
        }
    }
}";
        }

        protected override void writeLines(List<Vehicle> vehList)
        {
            var level = 0;
            foreach (Vehicle veh in vehList)
            {
                if (veh.level != level)
                {
                    level = veh.level;
                    file.WriteLine("\n            // level " + level);
                }
                file.WriteLine("            " + parseVehicle(veh));
            }

            file.WriteLine(@"
            // unknown (FogOfWar)
            d['unknown'] = { level: 0, name: 'UNKNOWN' };

            return d;
        }");
            writeVidMapping(vehList);


        }

        private void writeVidMapping(List<Vehicle> vehList)
        {
            file.WriteLine(@"
        private static function _initVidToVname():Array
        {
            var a:Array = new Array(); // Array is sparse in AS3
");
            foreach (Vehicle veh in vehList)
                file.WriteLine("            a[" + veh.vid + "] = \"" + veh.name.Replace("-", "_").ToLower() + "\";");
        }

        public string parseVehicle(Vehicle veh)
        {
            return (String.Format("{0} {{ {1}{2}{3}{4}{5}{6}{7}{8}{9}{10} }};",
              String.Format("d[\"{0}\"] =", veh.name.Replace("-", "_").ToLower()).PadRight(33),
              String.Format("id: {0},", veh.tankId).PadRight(9),
              String.Format("level: {0},", veh.level).PadRight(11),
              String.Format("type: \"{0}\", ", veh.getType()).PadRight(13),
              String.Format("hpstock: {0}, ", veh.hpstock).PadRight(15),
              String.Format("hptop: {0}, ", veh.hptop).PadRight(13),
              String.Format("turret: {0}, ", veh.status),
              String.Format("premium: {0}, ", (veh.premium ? "1" : "0")),
              String.Format("nation: \"{0}\", ", veh.nation).PadRight(19),
              String.Format("name: \"{0}\", ", veh.name).PadRight(37),
              String.Format("translationKey: \"{0}\"", veh.shortUserString)
              ));
        }

    }
}
