<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:c="components.*"
    xmlns:p="preview.*"
    width="500" height="450"
    borderVisible="false" xmlns:ns1="*">
    <fx:Script>
        <![CDATA[
            import flashx.textLayout.conversion.TextConverter;
            
            import mx.events.FlexEvent;
            import mx.events.ListEvent;
            
            import utils.GraphicsUtil;

            [Embed(source="images/bg/hills-1.jpg")]
            private const IMG1 : Class;
            [Embed(source="images/bg/hills-2.jpg")]
            private const IMG2 : Class;
            [Embed(source="images/bg/mannerheim-1.jpg")]
            private const IMG3 : Class;
            [Embed(source="images/bg/mannerheim-2.jpg")]
            private const IMG4 : Class;
            [Embed(source="images/bg/mannerheim-3.jpg")]
            private const IMG5 : Class;

            private const settings: Array = [
                //                 x    y    zoom maxHP
                { img: IMG1, m1: [ 200, 185, 0.9, 1500 ], m2: [ 410, 120, 0.7, 1200 ], m3: [ 360,  83, 0.6, 320 ] },
                { img: IMG2, m1: [  90, 165, 0.7, 1500 ], m2: [ 180, 245, 0.9, 1200 ], m3: [ 410, 140, 0.8, 320 ] },
                { img: IMG3, m1: [ 315, 245, 0.9, 1500 ], m2: [  90, 135, 0.8, 1200 ], m3: [ 310, 160, 0.8, 320 ] },
                { img: IMG4, m1: [ 437, 143, 0.6, 1500 ], m2: [ 130, 200, 0.9, 1200 ], m3: [ 325, 143, 0.7, 320 ] },
                { img: IMG5, m1: [  95, 260, 0.8, 1500 ], m2: [ 445, 225, 0.6, 1200 ], m3: [ 260, 240, 0.7, 320 ] }
            ];

            private static var s_taTestHtml:TextArea = null;
            public static function testHtml(value:String): void
            {
                if (s_taTestHtml == null)
                    return;
                s_taTestHtml.textFlow = TextConverter.importToFlow(
                    "<font color='#FFFFFF'>" + utils.Macros.format(value) + "</font>", TextConverter.TEXT_FIELD_HTML_FORMAT);
            }

            protected function onChange(event:Event):void
            {
                if (event)
                    event.stopPropagation();

                dispatchEvent(new Event(Event.CHANGE));
            }

            protected function cbBG_changeHandler(event:ListEvent):void
            {
                var s:Object = settings[cbBG.selectedIndex];
                imgBG.source = new (s.img)();
                marker1.x = s.m1[0];
                marker1.y = s.m1[1];
                marker1.zoom = s.m1[2];
                marker1.maxHP = s.m1[3];
				marker1.curHP = s.m1[3];
                marker2.x = s.m2[0];
                marker2.y = s.m2[1];
                marker2.zoom = s.m2[2];
                marker2.maxHP = s.m2[3];
				marker2.curHP = s.m2[3];
                marker3.x = s.m3[0];
                marker3.y = s.m3[1];
                marker3.zoom = s.m3[2];
                marker3.maxHP = s.m3[3];
				marker3.curHP = 0;
            }

            public function update():void
            {
                try
                {
                    if (marker1)
                        marker1.update();
                    if (marker2)
                        marker2.update();
                    if (marker3)
                        marker3.update();
                }
                catch (ex:Error)
                {
                    throw new Error("PreviewComponent::update(): " + ex.toString());
                }
            }

            private function switchLayout(event:Event):void
            {
                vsPreview.selectedChild = vsPreview.selectedChild == debug ? preview : debug;
            }

            private function onTestHtmlCreationComplete(event:Event):void
            {
                s_taTestHtml = taTestHtml;
                taTestHtml.filters = [ utils.GraphicsUtil.createShadowFilter(0,0,0,100,3,200) ];
            }
        ]]>
    </fx:Script>
    <fx:Metadata>
        [Event(name="change", type="flash.events.Event")]
        [ResourceBundle("components")]
    </fx:Metadata>
    <mx:ViewStack width="100%" height="100%" id="vsPreview" creationPolicy="all">
        <s:NavigatorContent width="100%" height="100%" id="preview">
            <mx:Canvas x="0" y="0" width="500" height="400" backgroundColor="0xAACCBB" verticalScrollPolicy="off" horizontalScrollPolicy="off">
                <mx:Image id="imgBG" x="0" y="0" width="500" height="400"/>
                <p:Marker id="marker3" creationComplete="marker3.init('ally_dead','SPG',7,'Hummel', 'germany-Hummel');cbBG_changeHandler(new ListEvent(''))"/>
                <p:Marker id="marker1" creationComplete="marker1.init('ally','heavyTank',8,'IS-3', 'ussr-IS-3');cbBG_changeHandler(new ListEvent(''))"/>
                <p:Marker id="marker2" creationComplete="marker2.init('enemy','AT-SPG',8,'Ferdinand', 'germany-Ferdinand');cbBG_changeHandler(new ListEvent(''))"/>
                <s:TextArea y="0" width="100%" height="100%" id="taTestHtml" borderVisible="false" visible="true" fontFamily="$FieldFont" editable="false" contentBackgroundAlpha="0" creationComplete="onTestHtmlCreationComplete(event)"/>
            </mx:Canvas>
            <s:BorderContainer y="400" width="100%" height="32" borderVisible="false">
                <s:HGroup top="5" left="0" bottom="0" width="100%" gap="4" verticalAlign="top" paddingLeft="4" paddingRight="4">
<!--                    <s:Label text="{resourceManager.getString('components', 'Background')}"/>-->
                    <mx:List id="cbBG" width="100" height="120" selectedIndex="0" editable="false" change="cbBG_changeHandler(event)" creationComplete="cbBG_changeHandler(new ListEvent(''))">
                        <mx:ArrayCollection>
                            <fx:String>{resourceManager.getString('components', 'Hills')} 1</fx:String>
                            <fx:String>{resourceManager.getString('components', 'Hills')} 2</fx:String>
                            <fx:String>{resourceManager.getString('components', 'Mannerheim')} 1</fx:String>
                            <fx:String>{resourceManager.getString('components', 'Mannerheim')} 2</fx:String>
                            <fx:String>{resourceManager.getString('components', 'Mannerheim')} 3</fx:String>
                        </mx:ArrayCollection>
                    </mx:List>
                    <s:ToggleButton id="btnExt" label="Alt" click="{marker1.extMode=marker2.extMode=marker3.extMode=btnExt.selected;}"/>
                    <s:ToggleButton id="btnDeadType" label="{resourceManager.getString('components', 'SelectDead')}" toolTip="{resourceManager.getString('components', 'SelectDeadToolTip')}" click="{marker3.deadType=btnDeadType.selected;}"/>
                    <s:Button label="{resourceManager.getString('components', 'Hit')}" click="{marker1.hit();marker2.hit();}"/>
                    <s:Button label="{resourceManager.getString('components', 'Action')}" click="{marker1.action();marker2.action();}"/>
                </s:HGroup>
            </s:BorderContainer>
        </s:NavigatorContent>
        <s:NavigatorContent width="100%" height="100%" id="debug">
            <s:TextArea right="0" width="500" height="100%" id="taDebug" visible="true" fontFamily="Consolas"/>
        </s:NavigatorContent>
    </mx:ViewStack>
    <mx:Image right="5" top="5" width="16" height="16" source="@Embed(source='images/revert.png')" toolTip="Debug Window" useHandCursor="true" buttonMode="true" click="switchLayout(event)"/>
</s:BorderContainer>
