<?xml version="1.0" encoding="utf-8"?>
<s:VGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:c="components.*"
	xmlns:p="panels.*"
	x="0" y="0" width="100%" height="100%" gap="-1">
	<fx:Metadata>
		[ResourceBundle("panels")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import components.DynamicClanFolderFieldEdit;
			import components.LabeledComponent;
			
			import events.SetDefaultValueEvent;
			import events.ValueChangedEvent;
			
			import mx.core.IVisualElement;
			
			import utils.Config;
			import utils.DefaultConfig;
			import utils.Utils;

			private var m_folders:Array = [];
			private var m_values:Object = {};

			[Embed(source="images/add.png")]
			private static var IMG_add : Class;

			protected var _config:String = null;
			[Bindable]
			public function get config():String
			{
				return _config;
			}
			public function set config(v:String):void
			{
				_config = v;
			}

			public function get value():*
			{
				var a:Array = [];
				a.push( { root: v_root.value, folders: m_folders.join(",") } );

				for (var n:Number = 0; n < m_folders.length; ++n)
					a.push( { folder: m_folders[n], players: m_values[m_folders[n]] } );

				return a;
			}

			protected function onChange(event: Event):void
			{
				if (event)
					event.stopPropagation();
				dispatchEvent(new events.ValueChangedEvent(this));
			}

			private function CreateNewElementButton():IVisualElement
			{
				var img:Image = new Image();
				img.width = 16;
				img.height = 16;
				img.id = "new";
				img.source = new IMG_add();
				img.toolTip = resourceManager.getString('panels', 'AddFolder');
				img.useHandCursor = true;
				img.buttonMode = true;
				img.addEventListener(MouseEvent.CLICK, this.onClick);
				return img;
			}

			private function CreateElement(v:String):DynamicClanFolderFieldEdit
			{
				var instance:DynamicClanFolderFieldEdit = new DynamicClanFolderFieldEdit();
				instance.label = v;
				//instance.labelWidth = "200";
				instance.width = 255;
				instance.group = rbg;
				instance.addEventListener(MouseEvent.CLICK, onClick);
				return instance;
			}

			public function RefreshSource(): void
			{
				var saved_label:String = rbg && rbg.selectedValue ? rbg.selectedValue.toString() : null;

				for (var n:Number = 0; n < container.numElements; ++n)
				{
					var e_old:DynamicClanFolderFieldEdit = container.getElementAt(n) as DynamicClanFolderFieldEdit;
					if (e_old)
						e_old.group = null;
					delete container.getElementAt(n);
				}
				container.removeAllElements();

				m_folders = [];
				m_values = {};

				var conf:String = "players";
				var v:Array = Config.GetValue(conf);
				var root:Object = null;
				for (var i:Number = 0; i < v.length; ++i)
				{
					if (v[i].hasOwnProperty("root"))
					{
						root = v[i];
						break;
					}
				}

				if (!root)
					root = { root: "../../../clanicons", folders: "RU,EU,NA,CT" };
				if (!root.hasOwnProperty("folders"))
					root.folders = "RU,EU,NA,CT";

				m_folders = root.folders.split(",");
				if (!m_folders || m_folders.length == 0)
					m_folders = [ "." ];

				for (var j:Number = 0; j < v.length; ++j)
				{
					if (!v[j].hasOwnProperty("folder") || v[j].hasOwnProperty("players"))
						continue;
					
					var name:String = v[j].folder || ".";
					m_values[name] = v[j].players;
					
					var e:DynamicClanFolderFieldEdit = CreateElement(name);
					container.addElement(e);
				}

				if (container.numElements == 0)
				{
					this.RefreshElement(null);
					container.addElement(CreateNewElementButton());
				}
				else
				{
					var selected:DynamicClanFolderFieldEdit = null;
					for (var k:Number = 0; k < container.numElements; ++k)
					{
						var el:DynamicClanFolderFieldEdit = container.getElementAt(k) as DynamicClanFolderFieldEdit;
						if (el.label == saved_label)
							selected = el;
					}
					if (!selected)
						selected = container.getElementAt(0) as DynamicClanFolderFieldEdit;
					selected.selected = true;
					this.RefreshElement(selected.label);
				}
			}

			protected function onRadioButtonChange(event:Event):void
			{
				RefreshElement(rbg.selectedValue.toString());
			}

			protected function RefreshElement(name:String):void
			{
				//trace(name);
				//p_players.value = name ? m_values[name] : null;
			}

			public function updateValue(event:ValueChangedEvent):void
			{
				try
				{
					event.stopPropagation();

					if (!event.sender.config)
					{
						trace("ERROR: config is null for: " + event.sender.id);
						return;
					}

					var activeValue:Object = m_values[rbg.selectedValue.toString()];
					for each (var value:Object in activeValue.values)
						Config.SetValue(event.sender.config, event.sender.value, value);

					onChange(null);
				}
				catch (ex:Error)
				{
					trace("ERROR: updateMarkerValue(): " + ex.toString());
				}
			}

			protected function setDefaultValue(event:SetDefaultValueEvent):void
			{
				try
				{
					event.stopPropagation();

					if (!event.sender.config)
					{
						trace("ERROR: config is null for: " + event.sender.id);
						return;
					}

					var activeValue:Object = m_values[rbg.selectedValue.toString()];
					for (var i:Number = 0; i < activeValue.values.length; ++i)
					{
						if (event.target.config == "textField")
						{
							var defValue:Object = DefaultConfig.vehicleName_alive;
							defValue.name = activeValue.values[i].name;
							defValue.format = activeValue.values[i].format;
							defValue.font = activeValue.values[i].font;
							defValue.shadow = activeValue.values[i].shadow;
							activeValue.values[i] = defValue;
						}
						else if (event.target.config == "textField.font")
							activeValue.values[i].font = DefaultConfig.font_13;
						else if (event.target.config == "textField.shadow")
							activeValue.values[i].shadow = DefaultConfig.shadow_200;
						else
						{
							trace("ERROR: unknown target config: " + event.target.config);
							return;
						}
					}

					onChange(null);
					RefreshSource();
				}
				catch (ex:Error)
				{
					trace("ERROR: setDefaultValue(): " + ex.toString());
				}
			}

			// add/del
			protected function onClick(event:MouseEvent):void
			{
				var e:DynamicClanFolderFieldEdit = event.currentTarget as DynamicClanFolderFieldEdit;
				if (event.target.id == "def")
				{
					dispatchEvent(new events.SetDefaultValueEvent(this));
				}
				else if (event.target.id == "del")
				{
					m_folders.splice(m_folders.indexOf(e.label), 1);
					delete m_values[e.label];
				}
				else if (event.target.id == "add" || event.target.id == "new")
				{
					var n:Number = 0;
					var name:String;
					do { name = resourceManager.getString('markers', 'Text') + " " + (++n); } while (m_values.hasOwnProperty(name));
					m_folders.push(name);
					m_values[name] = { folder: name, players: [] };
					var defValue:Object = DefaultConfig.vehicleName_alive;
					defValue.name = name;
					defValue.format = resourceManager.getString('markers', 'TEXT');
					for (var j:Number = 0; j < m_values[name].states.length; ++j)
						m_values[name].values.push(defValue);
				}
				else
					return;

				event.stopPropagation();

				onChange(null);
				RefreshSource();
			}
		]]>
	</fx:Script>
	<fx:Metadata>
		[Event(name="valueChanged", type="events.ValueChangedEvent")]
		[Event(name="setDefaultValue", type="events.SetDefaultValueEvent")]
	</fx:Metadata>
	<fx:Declarations>
		<s:RadioButtonGroup id="rbg" change="onRadioButtonChange(event)"/>
	</fx:Declarations>
	<c:PanelComponent title="{resourceManager.getString('panels', 'PClanIcons')}" width="100%" height="130" borderVisible="false">
		<mx:Image id="def" right="5" y="-18" width="16" height="16" source="@Embed(source='images/revert.png')" toolTip="{resourceManager.getString('markers', 'DefaultSettings')}" useHandCursor="true" buttonMode="true" click="onClick(event)"/>
		<s:VGroup left="10" right="10" top="10" bottom="10" gap="10">
			<c:LabeledPathSelector label="{resourceManager.getString('panels', 'PClanIconsRoot')}" id="v_root" change="onChange(event)"/>
			<s:Scroller left="10" right="10" top="5" bottom="6">
				<s:VGroup id="container" width="100%" height="100%" gap="-1"/>
			</s:Scroller>
		</s:VGroup>
	</c:PanelComponent>
	<s:Panel width="100%" height="100%" title="{resourceManager.getString('panels', 'PClanIconsIcons')}">
		<p:PDynamicValues id="p_players" config="players" editorClass="DynamicPlayersEdit" valueChanged="updateValue(event)"/>
	</s:Panel>
</s:VGroup>
